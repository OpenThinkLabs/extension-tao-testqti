define(['jquery', 'lodash', 'i18n', 'ui/hider', 'taoTests/runner/plugin', 'taoQtiTest/runner/helpers/messages', 'handlebars'], function ($$1, _, __, hider, pluginFactory, messages, Handlebars) { 'use strict';

    $$1 = $$1 && $$1.hasOwnProperty('default') ? $$1['default'] : $$1;
    _ = _ && _.hasOwnProperty('default') ? _['default'] : _;
    __ = __ && __.hasOwnProperty('default') ? __['default'] : __;
    hider = hider && hider.hasOwnProperty('default') ? hider['default'] : hider;
    pluginFactory = pluginFactory && pluginFactory.hasOwnProperty('default') ? pluginFactory['default'] : pluginFactory;
    messages = messages && messages.hasOwnProperty('default') ? messages['default'] : messages;
    Handlebars = Handlebars && Handlebars.hasOwnProperty('default') ? Handlebars['default'] : Handlebars;

    var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
      this.compilerInfo = [4,'>= 1.0.0'];
    helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
      var buffer = "", stack1, helper, functionType="function", escapeExpression=this.escapeExpression, self=this;

    function program1(depth0,data) {
      
      var buffer = "", stack1, helper;
      buffer += " ";
      if (helper = helpers.className) { stack1 = helper.call(depth0, {hash:{},data:data}); }
      else { helper = (depth0 && depth0.className); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
      buffer += escapeExpression(stack1);
      return buffer;
      }

    function program3(depth0,data) {
      
      var buffer = "", stack1, helper;
      buffer += "<span class=\"icon icon-";
      if (helper = helpers.icon) { stack1 = helper.call(depth0, {hash:{},data:data}); }
      else { helper = (depth0 && depth0.icon); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
      buffer += escapeExpression(stack1);
      stack1 = helpers.unless.call(depth0, (depth0 && depth0.text), {hash:{},inverse:self.noop,fn:self.program(4, program4, data),data:data});
      if(stack1 || stack1 === 0) { buffer += stack1; }
      buffer += "\"></span>";
      return buffer;
      }
    function program4(depth0,data) {
      
      
      return " no-label";
      }

    function program6(depth0,data) {
      
      var buffer = "", stack1, helper;
      buffer += "<span class=\"text\">";
      if (helper = helpers.text) { stack1 = helper.call(depth0, {hash:{},data:data}); }
      else { helper = (depth0 && depth0.text); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
      buffer += escapeExpression(stack1)
        + "</span>";
      return buffer;
      }

      buffer += "<li data-control=\"";
      if (helper = helpers.control) { stack1 = helper.call(depth0, {hash:{},data:data}); }
      else { helper = (depth0 && depth0.control); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
      buffer += escapeExpression(stack1)
        + "\" class=\"small btn-info action";
      stack1 = helpers['if'].call(depth0, (depth0 && depth0.className), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
      if(stack1 || stack1 === 0) { buffer += stack1; }
      buffer += "\" title=\"";
      if (helper = helpers.title) { stack1 = helper.call(depth0, {hash:{},data:data}); }
      else { helper = (depth0 && depth0.title); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
      buffer += escapeExpression(stack1)
        + "\">\n    <a class=\"li-inner\" href=\"#\" onclick=\"return false\">\n        ";
      stack1 = helpers['if'].call(depth0, (depth0 && depth0.icon), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});
      if(stack1 || stack1 === 0) { buffer += stack1; }
      buffer += "\n        ";
      stack1 = helpers['if'].call(depth0, (depth0 && depth0.text), {hash:{},inverse:self.noop,fn:self.program(6, program6, data),data:data});
      if(stack1 || stack1 === 0) { buffer += stack1; }
      buffer += "\n    </a>\n</li>\n";
      return buffer;
      });
    function buttonTpl(data, options, asString) {
      var html = Template(data, options);
      return (asString || true) ? html : $(html);
    }

    /**
     * This program is free software; you can redistribute it and/or
     * modify it under the terms of the GNU General Public License
     * as published by the Free Software Foundation; under version 2
     * of the License (non-upgradable).
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program; if not, write to the Free Software
     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
     *
     * Copyright (c) 2015 (original work) Open Assessment Technologies SA ;
     */
    var nextSection = pluginFactory({
      name: 'nextsection',
      init: function init() {
        var self = this;
        var testRunner = this.getTestRunner();
        var testConfig = testRunner.getTestData().config;

        function toggle() {
          var options = testRunner.getTestContext().options;

          if (testConfig.nextSection && (options.nextSection || options.nextSectionWarning)) {
            self.show();
          } else {
            self.hide();
          }
        }

        function nextSection() {
          testRunner.next('section');
        }

        this.$element = $$1(buttonTpl({
          control: 'next-section',
          title: __('Skip to the next section'),
          icon: 'fast-forward',
          text: __('Next Section')
        }));
        this.$element.on('click', function (e) {
          var context = testRunner.getTestContext();

          var enable = _.bind(self.enable, self);

          e.preventDefault();

          if (self.getState('enabled') !== false) {
            self.disable();

            if (context.options.nextSectionWarning) {
              testRunner.trigger('confirm.nextsection', messages.getExitMessage(__('Once you close this section, you cannot return to it or change your answers.'), 'section', testRunner), nextSection, // if the test taker accept
              enable, // if the test taker refuse
              {
                buttons: {
                  labels: {
                    ok: __('Close this Section'),
                    cancel: __('Review my Answers')
                  }
                }
              });
            } else {
              nextSection();
            }
          }
        });
        this.disable();
        toggle();
        testRunner.on('loaditem', toggle).on('enablenav', function () {
          self.enable();
        }).on('disablenav', function () {
          self.disable();
        }).on('hidenav', function () {
          self.hide();
        }).on('shownav', function () {
          self.show();
        });
      },

      /**
       * Called during the runner's render phase
       */
      render: function render() {
        //attach the element to the navigation area
        var $container = this.getAreaBroker().getNavigationArea();
        $container.append(this.$element);
      },

      /**
       * Called during the runner's destroy phase
       */
      destroy: function destroy() {
        this.$element.remove();
      },

      /**
       * Enable the button
       */
      enable: function enable() {
        this.$element.removeProp('disabled').removeClass('disabled');
      },

      /**
       * Disable the button
       */
      disable: function disable() {
        this.$element.prop('disabled', true).addClass('disabled');
      },

      /**
       * Show the button
       */
      show: function show() {
        hider.show(this.$element);
      },

      /**
       * Hide the button
       */
      hide: function hide() {
        hider.hide(this.$element);
      }
    });

    return nextSection;

});
