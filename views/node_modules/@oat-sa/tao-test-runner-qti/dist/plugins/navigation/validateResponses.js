define(['lodash', 'i18n', 'taoTests/runner/plugin', 'taoQtiTest/runner/helpers/currentItem'], function (_, __, pluginFactory, currentItemHelper) { 'use strict';

    _ = _ && _.hasOwnProperty('default') ? _['default'] : _;
    __ = __ && __.hasOwnProperty('default') ? __['default'] : __;
    pluginFactory = pluginFactory && pluginFactory.hasOwnProperty('default') ? pluginFactory['default'] : pluginFactory;
    currentItemHelper = currentItemHelper && currentItemHelper.hasOwnProperty('default') ? currentItemHelper['default'] : currentItemHelper;

    /**
     * This program is free software; you can redistribute it and/or
     * modify it under the terms of the GNU General Public License
     * as published by the Free Software Foundation; under version 2
     * of the License (non-upgradable).
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program; if not, write to the Free Software
     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
     *
     * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;
     */
    var pluginName = 'validateResponses';
    /**
     * Plugin
     * @returns {Object}
     */

    var validateResponses = pluginFactory({
      /**
       * Plugin name
       * @type {String}
       */
      name: pluginName,

      /**
       * Initialize plugin (called during runner's initialization)
       * @returns {this}
       */
      init: function init() {
        this.getTestRunner().before('move', function (e, direction) {
          var self = this;
          var testContext = this.getTestContext();
          var isInteracting = !this.getItemState(testContext.itemIdentifier, 'disabled');
          var testData = this.getTestData() || {};
          var testConfig = testData.config || {};

          var pluginConfig = _.defaults((testConfig.plugins || {})[pluginName] || {});

          if (!pluginConfig.validateOnPreviousMove && direction === 'previous') {
            return Promise.resolve();
          }

          if (isInteracting && testContext.enableValidateResponses && testContext.validateResponses) {
            return new Promise(function (resolve, reject) {
              if (_.size(currentItemHelper.getDeclarations(self)) === 0) {
                return resolve();
              }

              if (currentItemHelper.isAnswered(self, false)) {
                return resolve();
              }

              if (!self.getState('alerted.notallowed')) {
                // Only show one alert for itemSessionControl
                self.setState('alerted.notallowed', true);
                self.trigger('alert.notallowed', __('A valid response to this item is required.'), function () {
                  self.trigger('resumeitem');
                  reject();
                  self.setState('alerted.notallowed', false);
                });
              }
            });
          }
        });
        return this;
      }
    });

    return validateResponses;

});
