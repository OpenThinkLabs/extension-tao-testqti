define(['jquery', 'taoTests/runner/plugin', 'handlebars'], function ($$1, pluginFactory, Handlebars) { 'use strict';

    $$1 = $$1 && $$1.hasOwnProperty('default') ? $$1['default'] : $$1;
    pluginFactory = pluginFactory && pluginFactory.hasOwnProperty('default') ? pluginFactory['default'] : pluginFactory;
    Handlebars = Handlebars && Handlebars.hasOwnProperty('default') ? Handlebars['default'] : Handlebars;

    var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
      this.compilerInfo = [4,'>= 1.0.0'];
    helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
      var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

    function program1(depth0,data) {
      
      var buffer = "", stack1, helper;
      buffer += "\n        <span data-control=\"";
      if (helper = helpers.control) { stack1 = helper.call(depth0, {hash:{},data:data}); }
      else { helper = (depth0 && depth0.control); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
      buffer += escapeExpression(stack1)
        + "\" class=\"qti-controls\" title=\"";
      if (helper = helpers.text) { stack1 = helper.call(depth0, {hash:{},data:data}); }
      else { helper = (depth0 && depth0.text); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
      buffer += escapeExpression(stack1)
        + "\">";
      stack1 = helpers.unless.call(depth0, (data == null || data === false ? data : data.first), {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});
      if(stack1 || stack1 === 0) { buffer += stack1; }
      if (helper = helpers.text) { stack1 = helper.call(depth0, {hash:{},data:data}); }
      else { helper = (depth0 && depth0.text); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
      buffer += escapeExpression(stack1)
        + "</span>\n    ";
      return buffer;
      }
    function program2(depth0,data) {
      
      
      return " - ";
      }

      buffer += "<div class=\"title-box truncate\">\n    ";
      stack1 = helpers.each.call(depth0, (depth0 && depth0.titles), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
      if(stack1 || stack1 === 0) { buffer += stack1; }
      buffer += "\n</div>\n";
      return buffer;
      });
    function titleTpl(data, options, asString) {
      var html = Template(data, options);
      return (asString || true) ? html : $(html);
    }

    /**
     * This program is free software; you can redistribute it and/or
     * modify it under the terms of the GNU General Public License
     * as published by the Free Software Foundation; under version 2
     * of the License (non-upgradable).
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program; if not, write to the Free Software
     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
     *
     * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;
     */
    var title = pluginFactory({
      name: 'title',
      init: function init() {
        var self = this;
        var testRunner = this.getTestRunner();
        var testData = testRunner.getTestData();

        var createElement = function createElement() {
          var context = testRunner.getTestContext();
          var titles = [{
            control: 'qti-test-title',
            text: testData.title
          }];

          if (context.isDeepestSectionVisible) {
            titles.push({
              control: 'qti-test-position',
              //WTF !? isn't it the section title... ?
              text: context.sectionTitle
            });
          }

          return $$1(titleTpl({
            titles: titles
          }));
        };

        this.$element = createElement();
        testRunner.after('renderitem', function () {
          var $element = createElement();
          self.$element.replaceWith($element);
          self.$element = $element;
        });
      },
      render: function render() {
        var $container = this.getAreaBroker().getControlArea();
        $container.append(this.$element);
      }
    });

    return title;

});
